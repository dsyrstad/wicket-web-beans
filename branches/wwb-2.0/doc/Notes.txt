v2.0
----
- Validation - must be tied to component (add(IValidator)) -should we beanify
  components for add*() - e.g., setValidator() - or support regular methods.
  We'll need to beanify anyway (?) - setValidator, but precludes existing components,
  or at least requires subclassing or wrapping.
- Bean methods
- Support localization in constant strings

- System config that is loaded first with BeanFactory - common defs
- How is config found? Can be optionally explicit (InputStream/Reader or URL). 

Ahead:
- Use new Wicket-stuff data grid (http://wicketstuff.org/grid-examples/data-grid/simple.2)
- TinyMCE support at wicket-stuff: wicket-contrib-tinymce
- Wicket ExtJS support (beginnings) at http://www.wickettools.org
- Automagic property change support via Ener-J derived agent. (Later) 

Thinking Out Loud:
ValidatorWithConstructor { 
	class: MyValidator { args: p1, p2, p4 }; 
}

ValidatorFactory {
	class: MyValidator { factoryMethod: range; args: p1, p2, p4 }; 
}

NonPropertyMethods {
	class: ...;
	add: MyValidator;
	add: MyBehavior;
}

-- Multi-arg methods? How to handle multiple property bindings
MultiArgs {
	class: ...;
	someMethod: p1, p2, p3;
}

-- LATER --
MacroBean {
	class: SomeClass { args: "?param1", "?param2" }
}

MacroBeanUser {
	class: ...;
	components: MacroBean { param1: 'v1', param2: 'v2' }
}

----------------------------------
Database-driven Forms
----------------------------------
By using a different PropertyResolver, we could support CRUD via config files and a standard app.

Form { class: ...;
	jdbcInfo: jdbcInfoBean;
	components: table1.column1, table2.column2, ...;
}

jdbcInfoBean {
	class: JdbcInfoBean;
	jdbcDriver: ....;
	jdbcUrl: ...;
	jdbcUserName: ...;
	jdbcPassword: ....;
}

PropertyResolver would track which columns and tables are updated.
